import { getFirestore, collection, getDocs } from "firebase/firestore";

const db = getFirestore();

/**
 * Load to√†n b·ªô KEYWORD_RULES t·ª´ Firestore
 * Tr·∫£ v·ªÅ object d·∫°ng: { L1: [...], L2: [...], ..., L9: [...] }
 */
export const loadKeywordRules = async () => {
  const rules = {};
  const snapshot = await getDocs(collection(db, "KEYWORD_RULES"));

  snapshot.forEach(docSnap => {
    const category = docSnap.id;
    const data = docSnap.data();

    rules[category] = Array.isArray(data?.keywords)
      ? data.keywords
          .filter(k => typeof k === "string" && k.trim().length > 0)
          .map(k => k.trim())
      : [];
  });

  console.log("‚úÖ RULES LOADED:", rules);
  return rules;
};

/**
 * Detect lo·∫°i t·ª´ t√™n m√≥n ƒÉn b·∫±ng c√°ch so s√°nh tr·ª±c ti·∫øp chu·ªói g·ªëc
 * @param {string} name - T√™n m√≥n ƒÉn
 * @param {object} KEYWORD_RULES - T·ª´ kh√≥a ƒë√£ load t·ª´ Firestore
 * @returns {string} - T√™n lo·∫°i (L1, L2, L3 ho·∫∑c "Kh√°c")
 */
export const detectCategory = (name, KEYWORD_RULES) => {
  if (!name || !KEYWORD_RULES) {
    console.warn("‚ö†Ô∏è Kh√¥ng c√≥ name ho·∫∑c KEYWORD_RULES:", name, KEYWORD_RULES);
    return "Kh√°c";
  }

  const nameRaw = name.toString().trim();
  //console.log(`üîç T√™n m√≥n g·ªëc: "${nameRaw}"`);

  for (const [category, keywords] of Object.entries(KEYWORD_RULES)) {
    if (!Array.isArray(keywords)) continue;

    for (const keyword of keywords) {
      const keywordNormalized = keyword.toString().trim();
      if (!keywordNormalized) continue;

      if (nameRaw === keywordNormalized) {
        //console.log(`‚úÖ MATCH EXACT: "${nameRaw}" === "${keywordNormalized}" ‚Üí lo·∫°i: "${category}"`);
        return category;
      } else {
        //console.log(`‚ùå Kh√¥ng kh·ªõp: "${nameRaw}" !== "${keywordNormalized}"`);
      }
    }
  }

  console.log(`üìå Kh√¥ng t√¨m th·∫•y lo·∫°i cho: "${nameRaw}"`);
  return "Kh√°c";
};