import ExcelJS from "exceljs";
import { saveAs } from "file-saver";
import { format } from "date-fns";
import { numberToVietnameseText } from "./numberToText";

export default async function exportPhieuXuatKho({
  selectedDate,
  soPhieu,
  nguoiNhan,
  lyDoXuat,
  xuatTaiKho,
  soLuongHocSinh,
  thuKho,
  keToan,
  hieuTruong,
  rows,
}) {
  const workbook = new ExcelJS.Workbook();
  const sheet = workbook.addWorksheet("Phiếu Xuất Kho");

  const total = rows.reduce((sum, r) => sum + r.thucXuat * r.donGia, 0);
  const totalText = numberToVietnameseText(total);

  // ================== TIÊU ĐỀ ==================
  sheet.mergeCells("A1:G1");
  sheet.getCell("A1").value = "TRƯỜNG TIỂU HỌC BÌNH KHÁNH";
  sheet.getCell("A1").font = { bold: true, size: 12 };
  sheet.getCell("A1").alignment = { horizontal: "left" };

  sheet.mergeCells("A2:G2");
  sheet.getCell("A2").value = "Xã Bình Khánh, Huyện Cần Giờ";
  sheet.getCell("A2").font = { italic: true };
  sheet.getCell("A2").alignment = { horizontal: "left" };

  sheet.mergeCells("A4:G4");
  sheet.getCell("A4").value = "PHIẾU XUẤT KHO";
  sheet.getCell("A4").font = { bold: true, size: 14, color: { argb: "1F4E78" } };
  sheet.getCell("A4").alignment = { horizontal: "center" };

  // ================== THÔNG TIN PHIẾU ==================
  const infoRows = [
    [`Ngày: ${format(selectedDate, "dd/MM/yyyy")}`],
    [`Số: ${soPhieu}`],
    [`Người nhận: ${nguoiNhan}`],
    [`Lý do xuất kho: ${lyDoXuat}`],
    [`Xuất tại kho: ${xuatTaiKho}`],
    [`Số lượng học sinh: ${soLuongHocSinh}`],
  ];
  infoRows.forEach((row, i) => {
    sheet.mergeCells(`A${6 + i}:G${6 + i}`);
    const cell = sheet.getCell(`A${6 + i}`);
    cell.value = row[0];
    cell.font = { size: 11 };
    cell.alignment = { horizontal: "left" };
  });

  // ================== HEADER BẢNG ==================
  const headerRow = [
    "STT",
    "Tên hàng",
    "ĐVT",
    "Số lượng YC",
    "Số lượng X",
    "Đơn giá",
    "Thành tiền",
  ];
  sheet.addRow([]);
  const header = sheet.addRow(headerRow);
  header.font = { bold: true };
  header.alignment = { horizontal: "center", vertical: "middle" };
  header.fill = { type: "pattern", pattern: "solid", fgColor: { argb: "D9E1F2" } };
  header.eachCell((cell) => {
    cell.border = {
      top: { style: "thin" },
      left: { style: "thin" },
      bottom: { style: "thin" },
      right: { style: "thin" },
    };
  });

  // ================== DỮ LIỆU BẢNG ==================
  rows.forEach((r, i) => {
    const row = sheet.addRow([
      i + 1,
      r.name,
      r.unit,
      r.yeuCau,
      r.thucXuat,
      r.donGia,
      r.thucXuat * r.donGia,
    ]);
    row.eachCell((cell, colNumber) => {
      cell.alignment = {
        horizontal: colNumber === 2 ? "left" : "center",
        vertical: "middle",
      };
      cell.border = {
        top: { style: "thin" },
        left: { style: "thin" },
        bottom: { style: "thin" },
        right: { style: "thin" },
      };
    });
  });

  // ================== TỔNG CỘNG ==================
  const totalRow = sheet.addRow(["", "", "", "", "", "Tổng cộng", total]);
  totalRow.font = { bold: true };
  totalRow.alignment = { horizontal: "right" };
  totalRow.eachCell((cell) => {
    cell.border = {
      top: { style: "thin" },
      left: { style: "thin" },
      bottom: { style: "thin" },
      right: { style: "thin" },
    };
  });

  // ================== TỔNG TIỀN BẰNG CHỮ ==================
  sheet.addRow([]);
  const totalTextRow = sheet.addRow([`Tổng số tiền viết bằng chữ: ${totalText}`]);
  sheet.mergeCells(`A${totalTextRow.number}:G${totalTextRow.number}`);
  totalTextRow.getCell(1).font = { italic: true };
  totalTextRow.getCell(1).alignment = { horizontal: "left" };

  // ================== CHỮ KÝ ==================
  sheet.addRow([]);
  const signHeader = sheet.addRow([
    "Người nhận hàng",
    "Thủ kho",
    "Kế toán",
    "Thủ trưởng đơn vị",
  ]);
  sheet.mergeCells(`A${signHeader.number}:B${signHeader.number}`);
  sheet.mergeCells(`C${signHeader.number}:D${signHeader.number}`);
  sheet.mergeCells(`E${signHeader.number}:F${signHeader.number}`);
  sheet.mergeCells(`G${signHeader.number}:H${signHeader.number}`);
  signHeader.font = { bold: true };
  signHeader.alignment = { horizontal: "center" };

  const signNames = sheet.addRow([nguoiNhan, thuKho, keToan, hieuTruong]);
  sheet.mergeCells(`A${signNames.number}:B${signNames.number}`);
  sheet.mergeCells(`C${signNames.number}:D${signNames.number}`);
  sheet.mergeCells(`E${signNames.number}:F${signNames.number}`);
  sheet.mergeCells(`G${signNames.number}:H${signNames.number}`);
  signNames.alignment = { horizontal: "center" };
  signNames.font = { italic: true };

  // ================== ĐỘ RỘNG CỘT ==================
  const colWidths = [5, 40, 10, 15, 15, 15, 20];
  colWidths.forEach((w, i) => {
    sheet.getColumn(i + 1).width = w;
  });

  // ================== XUẤT FILE ==================
  const filename = `Phieu_Xuat_Kho_${format(selectedDate, "yyyyMMdd")}.xlsx`;
  const buffer = await workbook.xlsx.writeBuffer();
  saveAs(new Blob([buffer]), filename);
}
