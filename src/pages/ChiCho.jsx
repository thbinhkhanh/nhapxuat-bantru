import React, { useState, useEffect } from "react";
import {
  Box, Typography, Table, TableBody, TableCell, TableContainer,
  TableHead, TableRow, Paper, Card, CardContent, Divider, Stack
} from "@mui/material";
import { LocalizationProvider, DatePicker } from "@mui/x-date-pickers";
import { AdapterDateFns } from "@mui/x-date-pickers/AdapterDateFns";
import { vi } from "date-fns/locale";
import { doc, getDoc } from "firebase/firestore";
import { db } from "../firebase";
import { getStoredDate, setStoredDate } from "../utils/dateStorage"; // d√πng dateStorage
import { useDataContext, useSaveDataToContext } from "../context/DataContext";
import LinearProgress from '@mui/material/LinearProgress';
import { exportPhieuChiCho } from "../utils/exportPhieuChiCho";


import FileDownloadIcon from "@mui/icons-material/FileDownload";
import { Tooltip, IconButton } from "@mui/material";


export default function ChiCho() {
  const [data, setData] = useState([]);
  const [tongCong, setTongCong] = useState({ tongTien: 0, trich: 0, thucNhan: 0 });
  const [selectedDate, setSelectedDate] = useState(getStoredDate() || new Date());
  const { dataByDate } = useDataContext();
  const saveDataToContext = useSaveDataToContext();
  const [loading, setLoading] = useState(false);
  const [progress, setProgress] = useState(0);

  useEffect(() => {
    if (selectedDate) {
      setStoredDate(selectedDate); // l∆∞u v√†o localStorage khi thay ƒë·ªïi
    }
  }, [selectedDate]);

  useEffect(() => {
    const fetchData = async () => {
      if (!selectedDate) {
        console.warn("[ChiCho] selectedDate null/undefined ‚Üí b·ªè qua fetch");
        return;
      }

      setLoading(true);       // üîπ B·∫Øt ƒë·∫ßu loading
      setProgress(10);        // üîπ Set progress kh·ªüi ƒë·∫ßu

      console.log("[ChiCho] selectedDate =", selectedDate, "instanceof Date?", selectedDate instanceof Date);

      const yyyy = selectedDate.getFullYear();
      const mm = String(selectedDate.getMonth() + 1).padStart(2, "0");
      const dd = String(selectedDate.getDate()).padStart(2, "0");
      const dateStr = `${yyyy}-${mm}-${dd}`;

      console.log(`[ChiCho] ƒêang x·ª≠ l√Ω ng√†y: ${dateStr}`);

      if (dataByDate[dateStr]?.chiCho) {
        console.log(`[ChiCho] ‚úÖ D·ªØ li·ªáu ng√†y ${dateStr} l·∫•y t·ª´ context:`, dataByDate[dateStr].chiCho);
        setData(dataByDate[dateStr].chiCho.tableData);
        setTongCong(dataByDate[dateStr].chiCho.tongCong);
        setProgress(100);    // üîπ Ho√†n t·∫•t
        setLoading(false);   // üîπ K·∫øt th√∫c loading
        return;
      }

      try {
        console.log(`[ChiCho] üîÑ Fetch Firestore: DATA/${dateStr}`);
        const docRef = doc(db, "DATA", dateStr);
        const docSnap = await getDoc(docRef);
        setProgress(50);      // üîπ Fetch xong, ƒëang x·ª≠ l√Ω d·ªØ li·ªáu

        if (docSnap.exists()) {
          const docData = docSnap.data();
          console.log(`[ChiCho] ‚úÖ Firestore tr·∫£ v·ªÅ DATA/${dateStr}:`, docData);

          const matHang = Array.isArray(docData.matHang) ? docData.matHang : [];
          console.log("[ChiCho] Danh s√°ch m·∫∑t h√†ng:", matHang);

          saveDataToContext(selectedDate, { ...docData });
          console.log("[ChiCho] üëâ ƒê√£ save to√†n b·ªô docData v√†o context");

          const allowedKeywords = ["ƒê∆∞·ªùng c√°t", "G·∫°o", "D·∫ßu ƒÉn", "H·∫°t n√™m", "N∆∞·ªõc m·∫Øm"];

          const loaiMap = {};
          matHang.forEach((m) => {
            const l = m.loai || "Kh√°c";
            if (!loaiMap[l]) loaiMap[l] = [];
            loaiMap[l].push(m);
          });
          console.log("[ChiCho] loaiMap sau khi group:", loaiMap);

          const filteredLoaiMap = Object.fromEntries(
            Object.entries(loaiMap).filter(([_, items]) =>
              !items.some(m => allowedKeywords.some(keyword => m.ten.includes(keyword)))
            )
          );
          console.log("[ChiCho] filteredLoaiMap sau khi lo·∫°i keyword:", filteredLoaiMap);

          const sortedLoaiEntries = Object.entries(filteredLoaiMap).sort((a, b) => {
            const loaiA = a[0].toUpperCase();
            const loaiB = b[0].toUpperCase();
            return loaiA.localeCompare(loaiB, undefined, { numeric: true });
          });

          let sttCounter = 1;
          const tableData = [];
          const loaiNames = {
            L2: "Rau c·ªß, gia v·ªã",
            L3: "Tr√°i c√¢y + tr√°ng mi·ªáng",
            L4: "Tr·ª©ng",
            L5: "Th·ªãt heo",
            L6: "Th·ªãt b√≤",
            L7: "C√°",
            L8: "T√¥m",
            L9: "Th·ªãt g√†",
            L10: "Cua",
            L11: "Lo·∫°i kh√°c"
          };

          sortedLoaiEntries.forEach(([loai, items]) => {
            const tongTien = items.reduce((acc, m) => acc + (m.thanhTien || 0), 0);
            const trich = tongTien * 0.05;
            const thucNhan = tongTien - trich;

            tableData.push({
              stt: sttCounter++,
              dienGiai: loaiNames[loai] || loai,
              isLoaiRow: true,
              tongTien,
              trich,
              thucNhan
            });

            items.forEach(m => {
              tableData.push({
                stt: "",
                dienGiai: m.ten,
                dvt: m.dvt,
                soLuong: m.soLuong,
                donGia: m.donGia,
                thanhTien: m.thanhTien,
                trich: m.thanhTien ? m.thanhTien * 0.05 : 0,
                thucNhan: m.thanhTien ? m.thanhTien * 0.95 : 0,
                isLoaiRow: false
              });
            });
          });

          const tongTien = Object.values(filteredLoaiMap).flat().reduce((acc, m) => acc + (m.thanhTien || 0), 0);
          const trich = tongTien * 0.05;
          const thucNhan = tongTien - trich;
          const tongCongData = { tongTien, trich, thucNhan };

          console.log("[ChiCho] ‚úÖ K·∫øt qu·∫£ cu·ªëi c√πng tableData:", tableData);
          console.log("[ChiCho] ‚úÖ T·ªïng c·ªông:", tongCongData);

          setData(tableData);
          setTongCong(tongCongData);

          saveDataToContext(selectedDate, {
            chiCho: {
              tableData,
              tongCong: tongCongData
            }
          });
          console.log("[ChiCho] üëâ ƒê√£ save chiCho v√†o context");
        } else {
          console.warn(`[ChiCho] ‚ùå Kh√¥ng t√¨m th·∫•y document DATA/${dateStr}`);
          setData([]);
          setTongCong({ tongTien: 0, trich: 0, thucNhan: 0 });
          saveDataToContext(selectedDate, {
            chiCho: {
              tableData: [],
              tongCong: { tongTien: 0, trich: 0, thucNhan: 0 }
            }
          });
        }
        setProgress(100);     // üîπ Ho√†n t·∫•t
      } catch (error) {
        console.error("[ChiCho] ‚ùå Firestore fetch failed:", error);
      } finally {
        setLoading(false);    // üîπ K·∫øt th√∫c loading
      }
    };

    fetchData();
  }, [selectedDate]);



  const headCell = {
    backgroundColor: "#1976d2 !important",
    color: "#fff !important",
    fontWeight: 700,
    textTransform: "uppercase",
    fontSize: 13,
    py: 1.2,
    borderRight: "1px solid rgba(255,255,255,0.2)",
  };

  return (
    <Box sx={{ pt: "20px", pb: 6, px: { xs: 1, sm: 2 }, bgcolor: "#e3f2fd", minHeight: "100vh" }}>
      <Card elevation={8} sx={{ maxWidth: 1100, mx: "auto", borderRadius: 3, overflow: "hidden" }}>
        <CardContent sx={{ p: { xs: 2, md: 3 } }}>
          <Typography variant="subtitle1" fontWeight="bold">TR∆Ø·ªúNG TI·ªÇU H·ªåC B√åNH KH√ÅNH</Typography>
          <Typography variant="h5" align="center" fontWeight="bold" sx={{ color: "#1976d2", mt: 2 }}>
            B·∫¢NG T·ªîNG H·ª¢P CHI CH·ª¢
          </Typography>

          {/* DatePicker ti·∫øng Vi·ªát */}
          <Stack direction="row" spacing={2} alignItems="center" justifyContent="center" sx={{ my: 3 }}>
            <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={vi}>
              <DatePicker
                label="Ch·ªçn ng√†y"
                value={selectedDate}
                onChange={(newValue) => {
                  if (newValue) setSelectedDate(newValue);
                }}
                slotProps={{
                  textField: {
                    size: "small",
                    sx: {
                      width: 150,
                      "& input": {
                        textAlign: "center",
                        fontFamily: "Arial, sans-serif",
                        fontSize: "0.80rem" // ‚úÖ gi·∫£m c·ª° ch·ªØ
                      },
                      "& .MuiInputBase-root": {
                        height: 33 // ‚úÖ gi·∫£m chi·ªÅu cao √¥ l·ªãch
                      }
                    },
                  },
                }}
              />
            </LocalizationProvider>

            {/* N√∫t xu·∫•t Excel */}
            <Box sx={{ display: "flex", justifyContent: "flex-end", mt: 2 }}>
              <Tooltip title="Xu·∫•t Excel">
                <IconButton
                  color="success"
                  onClick={async () => {
                    // Ki·ªÉm tra thi·∫øt b·ªã di ƒë·ªông
                    const isMobile = /Mobi|Android/i.test(navigator.userAgent);
                    if (isMobile) {
                      alert("Ch·ª©c nƒÉng xu·∫•t Excel kh√¥ng kh·∫£ d·ª•ng tr√™n ƒëi·ªán tho·∫°i. Vui l√≤ng s·ª≠ d·ª•ng m√°y t√≠nh ƒë·ªÉ xu·∫•t file.");
                      return;
                    }
                    console.log("rows:", data);
                    await exportPhieuChiCho({
                      selectedDate,
                      rows: data,
                      tongCong,
                    });
                  }}
                >
                  <FileDownloadIcon />
                </IconButton>
              </Tooltip>
            </Box>
          </Stack>

          {loading && (
            <Box sx={{ width: "100%", maxWidth: 300, mt: 4, textAlign: "center", mx: "auto" }}>
              <LinearProgress
                variant="determinate"
                value={progress}
                sx={{
                  height: 3,           // üëà ƒë·ªô cao m·ªèng
                  borderRadius: 2,     // üëà bo g√≥c nh·∫π
                }}
              />
              <Typography
                variant="caption"
                color="text.secondary"
                sx={{ mt: 1, fontWeight: 400 }}
              >
                ƒêang t·∫£i d·ªØ li·ªáu... ({progress}%)
              </Typography>
            </Box>
          )}

          {/* Table */}
          <TableContainer component={Paper} sx={{ mt: 3, borderRadius: 2, boxShadow: 3 }}>
            <Table size="small" stickyHeader>
              <TableHead>
                <TableRow>
                  <TableCell align="center" sx={headCell}>STT</TableCell>
                  <TableCell align="center" sx={headCell}>Di·ªÖn gi·∫£i</TableCell>
                  <TableCell align="center" sx={headCell}>ƒêVT</TableCell>
                  <TableCell align="center" sx={headCell}>S·ªë l∆∞·ª£ng</TableCell>
                  <TableCell align="center" sx={headCell}>ƒê∆°n gi√°</TableCell>
                  <TableCell align="center" sx={headCell}>Th√†nh ti·ªÅn</TableCell>
                  <TableCell align="center" sx={headCell}>Tr√≠ch 5%</TableCell>
                  <TableCell align="center" sx={headCell}>Th·ª±c nh·∫≠n</TableCell>
                  <TableCell align="center" sx={{ ...headCell, borderRight: 0 }}>Ghi ch√∫</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {data.map((row, idx) => (
                  <TableRow
                    key={idx}
                    sx={{ backgroundColor: row.isLoaiRow ? "#d9e1f2" : "transparent" }}
                    hover={!row.isLoaiRow}
                  >
                    <TableCell align="center" sx={{ fontWeight: row.isLoaiRow ? 600 : "normal" }}>
                      {row.stt}
                    </TableCell>
                    <TableCell sx={{ fontWeight: row.isLoaiRow ? 600 : "normal" }}>
                      {row.dienGiai}
                    </TableCell>
                    <TableCell align="center">{row.dvt || ""}</TableCell>
                    <TableCell align="center">{row.soLuong || ""}</TableCell>
                    <TableCell align="right">{row.donGia?.toLocaleString() || ""}</TableCell>
                    <TableCell align="right">{row.thanhTien?.toLocaleString() || ""}</TableCell>

                    {/* C·ªôt Tr√≠ch 5% in ƒë·∫≠m n·∫øu l√† d√≤ng lo·∫°i */}
                    <TableCell
                      align="right"
                      sx={{ fontWeight: row.isLoaiRow ? 700 : "normal" }}
                    >
                      {row.trich?.toLocaleString() || ""}
                    </TableCell>

                    {/* C·ªôt Th·ª±c nh·∫≠n in ƒë·∫≠m n·∫øu l√† d√≤ng lo·∫°i */}
                    <TableCell
                      align="right"
                      sx={{ fontWeight: row.isLoaiRow ? 700 : "normal" }}
                    >
                      {row.thucNhan?.toLocaleString() || ""}
                    </TableCell>

                    <TableCell></TableCell>
                  </TableRow>
                ))}

                {/* H√†ng c·ªông */}
                <TableRow sx={{ backgroundColor: "#ffe0b2" }}>
                  <TableCell colSpan={5} align="center" sx={{ fontWeight: 700 }}>C·ªòNG</TableCell>
                  <TableCell align="right" sx={{ fontWeight: 700 }}>{tongCong.tongTien.toLocaleString()}</TableCell>
                  <TableCell align="right" sx={{ fontWeight: 700 }}>{tongCong.trich.toLocaleString()}</TableCell>
                  <TableCell align="right" sx={{ fontWeight: 700 }}>{tongCong.thucNhan.toLocaleString()}</TableCell>
                  <TableCell></TableCell>
                </TableRow>
              </TableBody>

            </Table>
          </TableContainer>

          {/* K√Ω t√™n */}
          <Box sx={{ mt: 4 }}>
            <Box sx={{ display: "grid", gridTemplateColumns: "repeat(2, 1fr)", textAlign: "center", gap: 2, mt: 1 }}>
              <Typography fontWeight="bold">Ng∆∞·ªùi ƒëi ch·ª£</Typography>
            </Box>
            <Divider sx={{ my: 6, opacity: 0 }} />
            <Box sx={{ display: "grid", gridTemplateColumns: "repeat(2, 1fr)", textAlign: "center", gap: 2 }}>
              <Typography fontWeight="bold">Phan Th·ªã Tuy·∫øt Minh</Typography>
            </Box>
          </Box>
        </CardContent>
      </Card>
    </Box>
  );
}
